{"version":3,"sources":["components/UserInput.js","components/Remaining.js","components/AddFoodBtn.js","components/FoodList.js","components/AddFoodItemModal.js","components/NewDayBtn.js","App.js","reportWebVitals.js","index.js"],"names":["UserInput","updateDailyCalTotState","updateEatingWindowState","updateStartedState","className","autoComplete","id","type","name","htmlFor","onClick","event","preventDefault","cals","document","getElementById","value","hours","includes","window","M","toast","html","isNaN","parseInt","test","Remaining","dailyCalTot","timeSinceFirstMeal","started","endTime","foodListArr","eatingWindow","curTime","stringTime","getHours","minutes","getMinutes","ampm","length","parseFloat","AddFoodBtn","href","FoodList","map","food","index","protoTypes","PropTypes","array","isRequired","bool","modalStyle","width","height","AddFoodItemModal","updateFoodListArrState","updateEndTimeState","startTime","updateStartTimeState","updateTimeSinceFirstMealState","updateCurTimeState","useState","foodItem","setFoodItem","servingSize","setServingSize","calories","setCalories","style","onChange","target","axios","get","then","res","console","log","data","foods","foodNutrients","newFoodItem","newFoodList","slice","concat","newCals","Date","endHour","tempEndTime","setHours","toString","post","calorieGoal","toFixed","item","quantity","rel","NewDayBtn","delete","App","setDailyCalTot","setEatingWindow","setFoodListArr","setStarted","setEndTime","setStartTime","setCurTime","setTimeSinceFirstMeal","useEffect","AutoInit","Promise","all","results","remaining","tempFoodArr","Object","keys","forEach","entry","push","tempCalTot","now","curTimeStr","parse","start","startTimeStr","userCalTot","userEatingWindow","windowEnd","windowStart","newTime","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.5dad1918.chunk.js","sourcesContent":["import React from 'react'\r\nimport PropTypes from 'prop-types';\r\n\r\nconst UserInput = ({ updateDailyCalTotState, updateEatingWindowState, updateStartedState }) => {\r\n  const onClick = (event) => {\r\n    event.preventDefault();\r\n\r\n    // declare input from users\r\n    const cals = document.getElementById('icon_food').value;\r\n    const hours = document.getElementById('icon_clock').value;\r\n\r\n    // regix to check for positive integer\r\n    const isNumeric = (value) => {\r\n      return /^\\d+$/.test(value);\r\n    }\r\n\r\n    // check user inputs positive integer for calories and eating window\r\n    if (cals.includes(',')) {\r\n      window.M.toast({html: 'Refrain from using a comma for numbers in the 1000s'});\r\n    } else if (cals.includes('.') || isNaN(cals)) {\r\n      window.M.toast({html: 'Enter an integer value'});\r\n    } else if (parseInt(cals) < 0) {\r\n      window.M.toast({html: 'Enter an integer greater than 0'});\r\n    } else if (cals === '') {\r\n      window.M.toast({html: 'Enter calorie goal'})\r\n    } else if (!isNumeric(hours)) {\r\n      window.M.toast({html: 'Enter integer value eating window'})\r\n    } else {\r\n      // set dailyCalTot, eatingWindow, and started app level states\r\n      updateDailyCalTotState(cals);\r\n      updateEatingWindowState(hours);\r\n      updateStartedState();\r\n    }\r\n  }\r\n\r\n  return (\r\n    <div className='container user-input-comp-container'>\r\n      <div className=\"row\">\r\n        <form className=\"col s12\" autoComplete='off'>\r\n          <div className=\"row\">\r\n            <div className=\"input-field col s6\">\r\n              <i className=\"material-icons prefix\">local_pizza</i>\r\n              <input id=\"icon_food\" type=\"text\" className=\"validate\" name='calorie-goal'></input>\r\n              <label htmlFor=\"icon_food\">Daily Calorie Goal</label>\r\n            </div>\r\n            <div className=\"input-field col s6\">\r\n              <i className=\"material-icons prefix\">access_time</i>\r\n              <input id=\"icon_clock\" type=\"tel\" className=\"validate\" name='window-length'></input>\r\n              <label htmlFor=\"icon_clock\">Eating Window Length</label>\r\n            </div>\r\n          </div>\r\n          <button className=\"btn waves-effect waves-light col offset-s5\" type=\"submit\" name=\"action\" onClick={onClick}>Submit\r\n            <i className=\"material-icons right\">send</i>\r\n          </button>\r\n        </form>\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\nUserInput.propTypes = {\r\n  updateDailyCalTotState: PropTypes.func.isRequired,\r\n  updateEatingWindowState: PropTypes.func.isRequired,\r\n  updateStartedState: PropTypes.func.isRequired,\r\n}\r\n\r\nexport default UserInput\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nconst Remaining = ({ \r\n  dailyCalTot, \r\n  timeSinceFirstMeal, \r\n  started, \r\n  endTime, \r\n  foodListArr, \r\n  eatingWindow, \r\n  curTime \r\n}) => {\r\n  // declare stringTime as empty string\r\n  let stringTime = '';\r\n  \r\n  // runs if endTime not empty\r\n  if (endTime) {\r\n    // declare hour, minute, and ampm from endTime prop, then store into stringTime var as hh:mm am/pm format\r\n    let hours = endTime.getHours();\r\n    let minutes = endTime.getMinutes();\r\n    let ampm = hours >= 12 ? 'pm' : 'am';\r\n    hours = hours % 12;\r\n    hours = hours ? hours : 12;\r\n    minutes = minutes < 10 ? '0' + minutes : minutes;\r\n    stringTime = hours + ':' + minutes + ampm;\r\n  }\r\n\r\n  return (\r\n    // run if started is true\r\n    started && (\r\n      <div className='container remaining-comp-container'>\r\n        <div className=\"row\">\r\n          <div className=\"col s12\">\r\n            <div className=\"card teal lighten-1\">\r\n              <div className=\"card-content white-text center\">\r\n                {/* return finish eating by if foodListArr has at least 1 item */}\r\n                {foodListArr.length >= 1 && (\r\n                  <h4>Finish Eating By\r\n                    {/* change to red text if past end time */}\r\n                    <span className={curTime > endTime ? 'red-text text-darken-2' : ''}>  {stringTime}</span>\r\n                  </h4>\r\n                )}\r\n                {/* return eating window if foodListArr has at least 2 items */}\r\n                {foodListArr.length >= 2 && (\r\n                  <h4>Eating Window:\r\n                    {/* change to red text if past eating window */}\r\n                    <span className={parseFloat(eatingWindow) < parseFloat(timeSinceFirstMeal) ? 'red-text text-darken-2' : ''}>  {timeSinceFirstMeal}</span>\r\n                  </h4>\r\n                )}\r\n                <h4>Calories Remaining:\r\n                  {/* change ro red text if past calorie goal */}\r\n                  <span className={parseInt(dailyCalTot) < 0 ? 'red-text text-darken-2' : ''}>  {dailyCalTot}</span>\r\n                </h4>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    )\r\n  )\r\n}\r\n\r\nRemaining.propTypes = {\r\n  dailyCalTot: PropTypes.string.isRequired,\r\n  timeSinceFirstMeal: PropTypes.string.isRequired,\r\n  started: PropTypes.bool.isRequired,\r\n  endTime: PropTypes.instanceOf(Date),\r\n  foodListArr: PropTypes.array.isRequired,\r\n  eatingWindow: PropTypes.string.isRequired,\r\n  curTime: PropTypes.instanceOf(Date),\r\n}\r\n\r\nexport default Remaining\r\n","import React from 'react'\r\nimport PropTypes from 'prop-types';\r\n\r\nconst AddFoodBtn = ({ started }) => {\r\n  return (\r\n    // runs if started state is true\r\n    started && (\r\n      <div className=\"add-food-comp-container center\">\r\n        {/* triggers modal when clicked */}\r\n        <a \r\n          className=\"waves-effect waves-light btn modal-trigger\"\r\n          href=\"#add-food-item-modal\"\r\n        >\r\n          Add Food Item\r\n        </a>\r\n      </div>\r\n    )\r\n  )\r\n}\r\n\r\nAddFoodBtn.propTypes = {\r\n  started: PropTypes.bool.isRequired,\r\n}\r\n\r\nexport default AddFoodBtn;\r\n","import React from 'react'\r\nimport PropTypes from 'prop-types';\r\n\r\nconst FoodList = ({ foodListArr, started }) => {\r\n  return (\r\n    // run if started is true\r\n    started && (\r\n      <div className=\"container food-list-comp-container\">\r\n        <ul className=\"collection with-header\">\r\n          {/* map through foodListArr prop, return a list item for each entry */}\r\n          {foodListArr.map((food, index) => (\r\n            <li className=\"collection-item center\" key={index}>\r\n              <div className='row'>\r\n                <div className='col s4'><h6>{food[0]}</h6></div>\r\n                <div className='col s4'><h6>{food[1]}</h6></div>\r\n                <div className='col s4'><h6>{food[2]}</h6></div>\r\n              </div>\r\n            </li>\r\n          ))}\r\n        </ul>\r\n      </div>\r\n    )\r\n  )\r\n}\r\n\r\nFoodList.protoTypes = {\r\n  foodListArr: PropTypes.array.isRequired,\r\n  started: PropTypes.bool.isRequired,\r\n}\r\n\r\nexport default FoodList;\r\n","import React, { useState } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport axios from 'axios';\r\n\r\nconst AddFoodItemModal = ({ \r\n  foodListArr, \r\n  updateFoodListArrState, \r\n  dailyCalTot, \r\n  updateDailyCalTotState, \r\n  updateEndTimeState, \r\n  eatingWindow, \r\n  startTime, \r\n  updateStartTimeState, \r\n  updateTimeSinceFirstMealState,\r\n  updateCurTimeState \r\n}) => {\r\n  // initializing comp level state\r\n  const [foodItem, setFoodItem] = useState('');\r\n  const [servingSize, setServingSize] = useState('');\r\n  const [calories, setCalories] = useState('');\r\n\r\n  const onSubmit = () => {\r\n    // regix to check for positive integer\r\n    const isNumeric = (value) => {\r\n      return /^\\d+$/.test(value);\r\n    }\r\n\r\n    // check if user inputs are valid\r\n    if (foodItem === '') {\r\n      window.M.toast({html: 'Enter food item'});\r\n    } else if (servingSize === '') {\r\n      window.M.toast({html: 'Enter serving size'});\r\n    } else if (!isNumeric(calories)) {\r\n      window.M.toast({html: 'Enter integer value calories'});\r\n    } else {\r\n      // call to usda nutrional api\r\n      // considering adding more functionality in the future, that might change the function/usability of the app though\r\n      axios.get(`https://api.nal.usda.gov/fdc/v1/foods/search?api_key=HcOenwa6MFJRacTk7hJdn8Spf1Zud9caZWoESvZ9&query=${foodItem}&pageSize=1`)\r\n        .then(res => console.log(res.data.foods[0].foodNutrients));\r\n\r\n      // declare user input to array, add array to foodListArr prop and declare in new array, declare calories remaining var\r\n      let newFoodItem = [foodItem, servingSize, calories];\r\n      let newFoodList = foodListArr.slice().concat([newFoodItem]);\r\n      let newCals = parseInt(dailyCalTot) - parseInt(calories);\r\n\r\n      // declare current date, declare hour for end of eating window time, declare new date with end of eating window hour\r\n      const curTime = new Date();\r\n      let endHour = curTime.getHours() + parseInt(eatingWindow);\r\n      let tempEndTime = new Date();\r\n      tempEndTime.setHours(endHour)\r\n      \r\n      // add user input to foodListArr, set dailyCalTot to new calories remaining, set curTime to curren time\r\n      updateFoodListArrState(newFoodList);\r\n      updateDailyCalTotState(newCals.toString());\r\n      updateCurTimeState(curTime);\r\n\r\n      // check if this is the first food item entered, set endTime and startTime\r\n      if (foodListArr.length === 0) {\r\n        updateEndTimeState(tempEndTime);\r\n        updateStartTimeState(curTime);\r\n\r\n        // store startTime, eatingWindow, and calorieGoal in database\r\n        axios.post('api/remaining', {\r\n          startTime: curTime,\r\n          eatingWindow: parseInt(eatingWindow),\r\n          calorieGoal: parseInt(dailyCalTot)\r\n        })\r\n          .then(res => console.log(res.data))\r\n      }\r\n\r\n      // if not first food item entered, declare time elapsed since start to nearest hundredths and set timeSinceFirstMeal\r\n      if (foodListArr.length > 0) {\r\n        let exactHours = (((curTime - startTime)/1000)/60)/60;\r\n        updateTimeSinceFirstMealState(exactHours.toFixed(2) + ' hours');\r\n      }\r\n\r\n      // store foodItem, servingSize, and calories in database\r\n      axios.post('api/foods', {\r\n        item: foodItem,\r\n        quantity: servingSize,\r\n        calories: calories\r\n      })\r\n        .then(res => console.log(res.data));\r\n    }\r\n  }\r\n\r\n  return (\r\n    <div id='add-food-item-modal' className='modal' style={modalStyle}>\r\n      <div className=\"modal-content\">\r\n        <div className=\"row\">\r\n          <div className=\"input-field\">\r\n            {/* updated foodItem comp state on user input */}\r\n            <input \r\n              type=\"text\" \r\n              name='food' \r\n              value={foodItem} \r\n              onChange={event => setFoodItem(event.target.value)}\r\n              autoComplete='off'\r\n            />\r\n            <label htmlFor='food' className='active'>Food Item</label>\r\n          </div>\r\n        </div>\r\n        <div className=\"row\">\r\n          <div className=\"input-field\">\r\n            {/* update servingSize comp state on user input */}\r\n            <input\r\n              type=\"text\" \r\n              name='serving' \r\n              value={servingSize} \r\n              onChange={event => setServingSize(event.target.value)}\r\n              autoComplete='off'\r\n            />\r\n            <label htmlFor='serving' className='active'>Serving Size</label>\r\n          </div>\r\n        </div>\r\n        <div className=\"row\">\r\n          <div className=\"input-field\">\r\n            {/* update calories comp state on user input */}\r\n            <input \r\n              type=\"text\" \r\n              name='calories' \r\n              value={calories} \r\n              onChange={event => setCalories(event.target.value)}\r\n              autoComplete='off'\r\n            />\r\n            <label htmlFor='calories' className='active'>Calories</label>\r\n          </div>\r\n        </div>\r\n      </div>\r\n      <div className=\"modal-footer\">\r\n        <a href=\"#!\" onClick={onSubmit} className=\"modal-close waves-effect waves-green btn\">Add</a>\r\n      </div>\r\n      <div className=\"modal-footer\">\r\n        {/* link usda nutrion information */}\r\n        <a href=\"https://fdc.nal.usda.gov/index.html\" rel=\"noreferrer\" target=\"_blank\" className=\"waves-effect waves-light btn\">Not Sure?</a>\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\n// size modal\r\nconst modalStyle = {\r\n  width: '50%',\r\n  height: '60%',\r\n};\r\n\r\nAddFoodItemModal.propTypes = {\r\n  foodListArr: PropTypes.array.isRequired,\r\n  updateFoodListArrState: PropTypes.func.isRequired,\r\n  dailyCalTot: PropTypes.string.isRequired,\r\n  updateDailyCalTotState: PropTypes.func.isRequired,\r\n  updateEndTimeState: PropTypes.func.isRequired,\r\n  eatingWindow: PropTypes.string.isRequired,\r\n  startTime: PropTypes.instanceOf(Date),\r\n  updateStartTimeState: PropTypes.func.isRequired,\r\n  updateTimeSinceFirstMealState: PropTypes.func.isRequired,\r\n  updateCurTimeState: PropTypes.func.isRequired,\r\n}\r\n\r\nexport default AddFoodItemModal;","import React from 'react'\r\nimport PropTypes from 'prop-types';\r\nimport axios from 'axios';\r\n\r\nconst NewDayBtn = ({ \r\n  started,\r\n  updateStartedState,\r\n  updateDailyCalTotState,\r\n  updateEatingWindowState,\r\n  updateFoodListArrState,\r\n  updateEndTimeState,\r\n  updateStartTimeState,\r\n  updateCurTimeState,\r\n  updateTimeSinceFirstMealState\r\n}) => {\r\n  const onClick = (event) => {\r\n    // update app states to default\r\n    event.preventDefault();\r\n    updateStartedState();\r\n    updateDailyCalTotState('0')\r\n    updateEatingWindowState('0')\r\n    updateFoodListArrState([])\r\n    updateEndTimeState()\r\n    updateStartTimeState()\r\n    updateCurTimeState()\r\n    updateTimeSinceFirstMealState('')\r\n    \r\n    // delete data from databases\r\n    axios.delete('api/foods')\r\n      .then(res => console.log(res.data));\r\n    axios.delete('api/remaining')\r\n      .then(res => console.log(res.data));\r\n  }\r\n\r\n  return (\r\n    // return if started is true\r\n    started && (\r\n      <div className=\"next-day-comp-container center\">\r\n        <button \r\n          className=\"waves-effect waves-light btn\"\r\n          onClick={onClick}\r\n        >\r\n          Start New Day\r\n        </button>\r\n      </div>\r\n    )\r\n  )\r\n}\r\n\r\nNewDayBtn.propTypes = {\r\n  started: PropTypes.bool.isRequired,\r\n  updateStartedState: PropTypes.func.isRequired,\r\n  updateDailyCalTotState: PropTypes.func.isRequired,\r\n  updateEatingWindowState: PropTypes.func.isRequired,\r\n  updateFoodListArrState: PropTypes.func.isRequired,\r\n  updateEndTimeState: PropTypes.func.isRequired,\r\n  updateStartTimeState: PropTypes.func.isRequired,\r\n  updateCurTimeState: PropTypes.func.isRequired,\r\n  updateTimeSinceFirstMealState: PropTypes.func.isRequired,\r\n}\r\n\r\nexport default NewDayBtn;\r\n","import React, { useState, useEffect }  from 'react';\nimport UserInput from './components/UserInput';\nimport Remaining from './components/Remaining';\nimport AddFoodBtn from './components/AddFoodBtn';\nimport FoodList from './components/FoodList';\nimport AddFoodItemModal from './components/AddFoodItemModal';\nimport NewDayBtn from './components/NewDayBtn';\nimport axios from 'axios';\n\nimport './App.css';\n\nconst  App = () => {\n  // initializing state\n  const [dailyCalTot, setDailyCalTot] = useState('0');\n  const [eatingWindow, setEatingWindow] = useState('0');\n  const [foodListArr, setFoodListArr] = useState([]);\n  const [started, setStarted] = useState(false);\n  const [endTime, setEndTime] = useState();\n  const [startTime, setStartTime] = useState();\n  const [curTime, setCurTime] = useState();\n  const [timeSinceFirstMeal, setTimeSinceFirstMeal] = useState('')\n\n  // useEffect hook runs once upon initial mount\n  useEffect(() => {\n    // Initialize Materialize JS\n    window.M.AutoInit();\n\n    // check if data already entered\n    Promise.all([firstApiCall(), secondApiCall()])\n    .then((results) => {\n      // get results of both api calls, update state if db has values\n      if (results[0].data.length > 0) {\n        const food = results[0].data;\n        const remaining = results[1].data;\n\n        // set foodListArr state\n        let tempFoodArr = [];\n        Object.keys(food).forEach((entry) => {\n          tempFoodArr.push([\n            food[entry]['item'], \n            food[entry]['quantity'], \n            food[entry]['calories']\n          ]);\n        });\n        updateFoodListArrState(tempFoodArr);\n\n        // set started state\n        updateStartedState();\n\n        // set dailyCalTot state\n        let tempCalTot = 0;\n        Object.keys(food).forEach((entry) => {\n          tempCalTot += food[entry]['calories']\n        })\n        updateDailyCalTotState((remaining[0]['calorieGoal'] - tempCalTot).toString());\n\n        // set eatingWindow state\n        updateEatingWindowState(remaining[0]['eatingWindow'].toString())\n\n        // set curTime state\n        updateCurTimeState(new Date());\n\n        // set startTime state\n        updateStartTimeState(new Date(remaining[0]['startTime']));\n\n        // set timeSinceFirstMeal state\n        let now = new Date();\n        let curTimeStr = Date.parse(now);\n        let start = new Date(remaining[0]['startTime']);\n        let startTimeStr = Date.parse(start);\n        updateTimeSinceFirstMealState(((((curTimeStr - startTimeStr)/1000)/60)/60).toFixed(2) + ' hours')\n\n        // set endTime state\n        let endHour = start.getHours() + remaining[0]['eatingWindow'];\n        let tempEndTime = new Date(remaining[0]['startTime']);\n        tempEndTime.setHours(endHour);\n        updateEndTimeState(tempEndTime);\n      }\n    });\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n\n  // api call to foods database\n  function firstApiCall() {\n    return axios.get('api/foods');\n  }\n\n  // api call to remaining database\n  function secondApiCall() {\n    return axios.get('api/remaining');\n  }\n\n   // change dailyCalTot state\n   const updateDailyCalTotState = (userCalTot) => {\n     setDailyCalTot(userCalTot);\n   }\n\n   // change eatingWindow state \n   const updateEatingWindowState = (userEatingWindow) => {\n     setEatingWindow(userEatingWindow);\n   }\n\n  //  change foodListArr state\n   const updateFoodListArrState = (foodItem) => {\n     setFoodListArr(foodItem);\n   }\n\n  //  change started state\n   const updateStartedState = () => {\n     setStarted(!started);\n   }\n\n  //  change endTime state\n   const updateEndTimeState = (windowEnd) => {\n     setEndTime(windowEnd);\n   }\n\n  //  change startTime state\n   const updateStartTimeState = (windowStart) => {\n     setStartTime(windowStart);\n   }\n\n  //  change timeSinceFirstMeal state\n   const updateTimeSinceFirstMealState = (newTime) => {\n     setTimeSinceFirstMeal(newTime);\n   }\n\n  //  change curTime state\n   const updateCurTimeState = (now) => {\n     setCurTime(now);\n   }\n\n  return (\n    <div className=\"App\">\n      {/* UserInput comp resceives and stores data from user */}\n      {!started && (\n        <UserInput \n          updateDailyCalTotState={updateDailyCalTotState}\n          updateEatingWindowState={updateEatingWindowState}\n          updateStartedState={updateStartedState}\n        />\n      )}\n      {/* Remaining comp displays inormation about calories and time based on user input */}\n      <Remaining \n        dailyCalTot={dailyCalTot} \n        timeSinceFirstMeal={timeSinceFirstMeal}\n        started={started}\n        endTime={endTime}\n        foodListArr={foodListArr}\n        eatingWindow={eatingWindow}\n        curTime={curTime}\n        startTime={startTime}\n      />\n      {/* AddFoodBtn comp launches a modal */}\n      <AddFoodBtn started={started}/>\n      {/* AddFoodItemModal comp is a modal that accepts and stores food input from user and updates state based on that input */}\n      <AddFoodItemModal \n        foodListArr={foodListArr} \n        updateFoodListArrState={updateFoodListArrState}\n        updateDailyCalTotState={updateDailyCalTotState}\n        dailyCalTot={dailyCalTot}\n        updateEndTimeState={updateEndTimeState}\n        eatingWindow={eatingWindow}\n        startTime={startTime}\n        updateStartTimeState={updateStartTimeState}\n        updateTimeSinceFirstMealState={updateTimeSinceFirstMealState}\n        updateCurTimeState={updateCurTimeState}\n      />\n      {/* FoodList comp displays the food items entered by user */}\n      <FoodList foodListArr={foodListArr} started={started}/>\n      {/* NewDayBtn clears the state and returns user to user input page */}\n      <NewDayBtn \n        started={started}\n        updateStartedState={updateStartedState}\n        updateDailyCalTotState={updateDailyCalTotState}\n        updateEatingWindowState={updateEatingWindowState}\n        updateFoodListArrState={updateFoodListArrState}\n        updateEndTimeState={updateEndTimeState}\n        updateStartTimeState={updateStartTimeState}\n        updateCurTimeState={updateCurTimeState}\n        updateTimeSinceFirstMealState={updateTimeSinceFirstMealState}\n      />\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\nreportWebVitals();\n"],"sourceRoot":""}